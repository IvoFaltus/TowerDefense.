Index: src/Map.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.w3c.dom.ls.LSOutput;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.border.BevelBorder;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.Set;\r\n\r\npublic class Map extends JFrame {\r\n\r\n    private int enemySpeed;\r\n\r\n    public Map(int enemySpeed) {\r\n\r\n        this.enemySpeed = enemySpeed;\r\n    }\r\n\r\n    public Map(ProgramToggle toggle, int enemySpeed) {\r\n        this.toggle = toggle;\r\n        this.enemySpeed = enemySpeed;\r\n        if (enemySpeed == 0) {\r\n            this.enemySpeed = 1000;\r\n        }\r\n    }\r\n\r\n    boolean won = false;\r\n    private ProgramToggle toggle;\r\n    boolean stop2 = false;\r\n\r\n    public Map(ProgramToggle toggle) {\r\n        this.toggle = toggle;\r\n    }\r\n\r\n    public Map() {\r\n    }\r\n\r\n    ArrayList<Knight> knights2 = new ArrayList<>();\r\n    JButton PauseButton = new JButton(\"Stop\");\r\n    JButton towerButton = new JButton(\"Place Tower\");\r\n    JButton HelpButton = new JButton(\"ask Help\");\r\n    JButton removeTower = new JButton(\"Pick Tower up\");\r\n    boolean stop = false;\r\n\r\n    Color darkGreen = new Color(106, 170, 100);\r\n    Color lightBrown = new Color(194, 155, 99);\r\n    Color finish= new Color(194, 155, 110);\r\n    private static int x = 5;\r\n    private static int y = 6;\r\n    private static int TILE_SIZE = 90; // pixels\r\n\r\n    JLabel[][] labels5x5 = new JLabel[5][6];\r\n    JLabel[][] labels7x7 = new JLabel[7][7];\r\n    JLabel[][] labels10x10 = new JLabel[10][10];\r\n\r\n\r\n    /**\r\n     * Handles the rendering of the map based on the current game state.\r\n     * It updates the map's display by triggering a repaint and recalculating the layout.\r\n     * Additionally, it controls the delay between rendering steps based on whether the game is paused or not.\r\n     *\r\n     * @param pause a boolean indicating whether the game is paused or not. If true, the game will pause the render.\r\n     * @param nextStep a Runnable that represents the next action to perform (e.g., moving the next enemy).\r\n     */\r\n    public void mapRender(Boolean pause, Runnable nextStep) {\r\n        int delay = pause ? 9000 : enemySpeed; // delay in milliseconds\r\n        // System.out.println(\"enemy speed is \"+ enemySpeed);\r\n        new Timer(delay, e -> {\r\n            ((Timer) e.getSource()).stop(); // stop the timer after one run\r\n            revalidate();\r\n            repaint();\r\n            nextStep.run(); // call the next step (e.g. move next enemy)\r\n        }).start();\r\n    }\r\n    /**\r\n     * Creates toolbars for pause, tower placement, help, and remove tower functionality\r\n     * and adds them to the main window with improved styling.\r\n     *\r\n     * @param additionLines the number of additional lines to add below the toolbars\r\n     */\r\n    public void createOptionLine(int additionLines) {\r\n        JToolBar toolBarPause = new JToolBar();\r\n        JToolBar toolBarPlace = new JToolBar();\r\n        JToolBar toolBarHelp = new JToolBar();\r\n        JToolBar toolBarRemove = new JToolBar();\r\n\r\n        toolBarPause.add(Box.createHorizontalStrut(20));\r\n        toolBarHelp.add(Box.createHorizontalStrut(10));\r\n\r\n        Color barColor = new Color(80, 80, 80);\r\n\r\n        toolBarPause.setBackground(barColor);\r\n        toolBarPlace.setBackground(barColor);\r\n        toolBarHelp.setBackground(barColor);\r\n        toolBarRemove.setBackground(barColor);\r\n\r\n        toolBarPause.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        toolBarPlace.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        toolBarHelp.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        toolBarRemove.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n\r\n        toolBarPause.setFloatable(false);\r\n        toolBarPlace.setFloatable(false);\r\n        toolBarHelp.setFloatable(false);\r\n        toolBarRemove.setFloatable(false);\r\n\r\n        styleButton(PauseButton);\r\n        styleButton(towerButton);\r\n        styleButton(HelpButton);\r\n        styleButton(removeTower);\r\n\r\n        toolBarPause.add(PauseButton);\r\n        toolBarPlace.add(towerButton);\r\n        toolBarHelp.add(HelpButton);\r\n        toolBarRemove.add(removeTower);\r\n\r\n        add(toolBarPause, BorderLayout.SOUTH);\r\n        add(toolBarPlace, BorderLayout.SOUTH);\r\n        add(toolBarHelp, BorderLayout.SOUTH);\r\n        add(toolBarRemove, BorderLayout.SOUTH);\r\n\r\n        for (int i = 0; i < additionLines; i++) {\r\n            JToolBar filler = new JToolBar();\r\n            filler.setFloatable(false);\r\n            filler.setBackground(barColor);\r\n            filler.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n            filler.add(Box.createHorizontalStrut(10));\r\n            add(filler, BorderLayout.SOUTH);\r\n        }\r\n    }\r\n\r\n    private void styleButton(JButton button) {\r\n        button.setFont(new Font(\"Arial\", Font.BOLD, 10));\r\n        button.setForeground(Color.WHITE);\r\n        button.setBackground(new Color(100, 100, 100));\r\n        button.setFocusPainted(false);\r\n        button.setPreferredSize(new Dimension(80, 40));\r\n        button.setBorder(BorderFactory.createCompoundBorder(\r\n                BorderFactory.createLineBorder(new Color(60, 60, 60)),\r\n                BorderFactory.createEmptyBorder(5, 10, 5, 10)\r\n        ));\r\n        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\r\n        button.setOpaque(true);\r\n        button.setContentAreaFilled(true);\r\n        button.setBorderPainted(false);\r\n    }\r\n\r\n    /**\r\n     * Returns a list of buttons used for pausing, placing towers, asking for help, and removing towers.\r\n     * @return a list of the buttons\r\n     */\r\n    public ArrayList<JButton> StopResumePlaceHelpRemove() {\r\n        ArrayList<JButton> buttons = new ArrayList<>();\r\n        buttons.add(PauseButton);\r\n        buttons.add(towerButton);\r\n        buttons.add(HelpButton);\r\n        buttons.add(removeTower);\r\n        return buttons;\r\n    }\r\n//region map drawing\r\n    /**\r\n     * Creates a map with 5x5 grid.\r\n     * @param labels 2D array of labels for the map\r\n     */\r\n    public void map5x5(JLabel[][] labels) {\r\n        for (int i = 0; i < y; i++) {\r\n            switch (i) {\r\n                case 0:\r\n                    createLine(5, \" 0 1 2\", labels,1);\r\n                    break;\r\n                case 1:\r\n                    createLine(5, \"2\", labels,1);\r\n                    break;\r\n                case 2:\r\n                    createLine(5, \" 2 \", labels,1);\r\n                    break;\r\n                case 3:\r\n                    createLine(5, \"2\", labels,1);\r\n                    break;\r\n                case 4:\r\n                    createFinishLine(5, \"2 3 4\", labels,1);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a map with 5x5 grid and additional variations.\r\n     * @param labels 2D array of labels for the map\r\n     */\r\n    public void map5x5_w2(JLabel[][] labels) {\r\n        for (int i = 0; i < y; i++) {\r\n            switch (i) {\r\n                case 0:\r\n                    createLine(5, \"0 1 2 3 4\", labels,2);\r\n                    break;\r\n                case 1:\r\n                    createLine(5, \"0 4\", labels,2);\r\n                    break;\r\n                case 2:\r\n                    createLine(5, \"0 1 2 3 4\", labels,2);\r\n                    break;\r\n                case 3:\r\n                    createLine(5, \"0 4\", labels,2);\r\n                    break;\r\n                case 4:\r\n                    createFinishLine(5, \"0 1 2 3 4\", labels,2);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a map with 7x7 grid and additional variations.\r\n     * @param labels 2D array of labels for the map\r\n     */\r\n    public void map7x7_w3(JLabel[][] labels) {\r\n        for (int i = 0; i < 7; i++) {\r\n            switch (i) {\r\n                case 0:\r\n                    createLine(7, \"0 1 2 3 4 5\", labels,3);\r\n                    break;\r\n                case 1:\r\n                    createLine(7, \"2 5\", labels,3);\r\n                    break;\r\n                case 2:\r\n                    createLine(7, \"2 5\", labels,3);\r\n                    break;\r\n                case 3:\r\n                    createLine(7, \"2 5 6\", labels,3);\r\n                    break;\r\n                case 4:\r\n                    createLine(7, \"2 3 6\", labels,3);\r\n                    break;\r\n                case 5:\r\n                    createLine(7, \"3 4 6\", labels,3);\r\n                    break;\r\n                case 6:\r\n                    createFinishLine(7, \"4 5 6\", labels,3);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a map with 10x10 grid and additional variations.\r\n     * @param labels 2D array of labels for the map\r\n     */\r\n    public void map10x10_w4(JLabel[][] labels) {\r\n        for (int i = 0; i < 10; i++) {\r\n            switch (i) {\r\n                case 0:\r\n                    createLine(10, \"1\", labels,4);\r\n                    break;\r\n                case 1:\r\n                    createLine(10, \"1\", labels,4);\r\n                    break;\r\n                case 2:\r\n                    createLine(10, \"1\", labels,4);\r\n                    break;\r\n                case 3:\r\n                    createLine(10, \"1 2 3 4 5 6 7 8 9\", labels,4);\r\n                    break;\r\n                case 4:\r\n                    createLine(10, \"1 4 9\", labels,4);\r\n                    break;\r\n                case 5:\r\n                    createLine(10, \"1 4 9\", labels,4);\r\n                    break;\r\n                case 6:\r\n                    createLine(10, \"1 2 3 4 5 6 7 8 9\", labels,4);\r\n                    break;\r\n                case 7:\r\n                    createLine(10, \"4 7 9 \", labels,4);\r\n                    break;\r\n                case 8:\r\n                    createLine(10, \"4 7 9\", labels,4);\r\n                    break;\r\n                case 9:\r\n                    createFinishLine(10, \"4 5 6 7 8 9\", labels,4);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a map with 10x10 grid and additional variations.\r\n     * @param labels 2D array of labels for the map\r\n     */\r\n    public void map10x10_w5(JLabel[][] labels) {\r\n        for (int i = 0; i < 10; i++) {\r\n            switch (i) {\r\n                case 0:\r\n                    createLine(10, \"4\", labels,5);\r\n                    break;\r\n                case 1:\r\n                    createLine(10, \"0 1 2 3 4 5 6 7 8 9 \", labels,5);\r\n                    break;\r\n                case 2:\r\n                    createLine(10, \"0 9\", labels,5);\r\n                    break;\r\n                case 3:\r\n                    createLine(10, \" 0 1 2 3 4 5 6 7 9\", labels,5);\r\n                    break;\r\n                case 4:\r\n                    createLine(10, \" 0 7 9\", labels,5);\r\n                    break;\r\n                case 5:\r\n                    createLine(10, \"0 1 2 3 4 5 7 9\", labels,5);\r\n                    break;\r\n                case 6:\r\n                    createLine(10, \"0 5 7 9\", labels,5);\r\n                    break;\r\n                case 7:\r\n                    createLine(10, \"0 1 2 3 5 7 9\", labels,5);\r\n                    break;\r\n                case 8:\r\n                    createLine(10, \"3 5 7 9\", labels,5);\r\n                    break;\r\n                case 9:\r\n                    createFinishLine(10, \"3 4 5 6 7 8 9\", labels,5);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void map10x10_w6(JLabel[][] labels){}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//endregion\r\npublic void createTile(int lineLength, Color baseColor, JLabel[][] labels, int mapType) {\r\n    JLabel tile = new JLabel(\" \", SwingConstants.CENTER);\r\n    tile.setPreferredSize(new Dimension(TILE_SIZE, TILE_SIZE));\r\n    tile.setOpaque(true);\r\n\r\n    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Get path and finish colors for this map\r\n    Color pathColor = getPathColor(mapType);\r\n    Color finishColor = getFinishColor(mapType);\r\n\r\n    // Identify and tag tile type\r\n    boolean isPath = baseColor.equals(pathColor);\r\n    boolean isFinish = baseColor.equals(finishColor);\r\n\r\n    tile.putClientProperty(\"isPath\", isPath);\r\n    tile.putClientProperty(\"isFinish\", isFinish);\r\n\r\n    // Shade the base color for texture\r\n    Color texturedColor = blendShades(baseColor, 0.5, 0.3, 0.2);\r\n    tile.setBackground(texturedColor);\r\n\r\n    // Border\r\n    tile.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.GRAY));\r\n\r\n    // Gloss only on terrain (not on path or finish)\r\n    tile.setLayout(new BorderLayout());\r\n    if (!isPath && !isFinish) {\r\n        JLabel gloss = new JLabel();\r\n        gloss.setOpaque(true);\r\n        gloss.setBackground(new Color(255, 255, 255, 18));\r\n        gloss.setPreferredSize(new Dimension(TILE_SIZE, TILE_SIZE / 2));\r\n        tile.add(gloss, BorderLayout.NORTH);\r\n    }\r\n\r\n    add(tile);\r\n\r\n    // Place in grid\r\n    boolean placed = false;\r\n    for (int y = 0; y < lineLength && !placed; y++) {\r\n        for (int x = 0; x < lineLength; x++) {\r\n            if (labels[x][y] == null) {\r\n                labels[x][y] = tile;\r\n                placed = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n    // Helper to simulate textured shading\r\n    private Color blendShades(Color base, double baseWeight, double darkerWeight, double darker2Weight) {\r\n        Color darker = base.darker();\r\n        Color muchDarker = darker.darker();\r\n        return new Color(\r\n                (int)(base.getRed() * baseWeight + darker.getRed() * darkerWeight + muchDarker.getRed() * darker2Weight),\r\n                (int)(base.getGreen() * baseWeight + darker.getGreen() * darkerWeight + muchDarker.getGreen() * darker2Weight),\r\n                (int)(base.getBlue() * baseWeight + darker.getBlue() * darkerWeight + muchDarker.getBlue() * darker2Weight)\r\n        );\r\n    }\r\n\r\n    public void createLine(int lineLength, String filledTiles, JLabel[][] labels5x5, int mapType) {\r\n        String[] tiles = filledTiles.trim().split(\"\\\\s+\");\r\n        int[] numbers = new int[tiles.length];\r\n\r\n        for (int i = 0; i < tiles.length; i++) {\r\n            numbers[i] = Integer.parseInt(tiles[i]);\r\n        }\r\n\r\n        Color pathColor = getPathColor(mapType);\r\n        Color terrainColor = getTerrainColor(mapType);\r\n\r\n        for (int i = 0; i < lineLength; i++) {\r\n            if (contains(numbers, i)) {\r\n                createTile(lineLength, pathColor, labels5x5, mapType);\r\n            } else {\r\n                createTile(lineLength, terrainColor, labels5x5, mapType);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void createFinishLine(int lineLength, String filledTiles, JLabel[][] labels5x5, int mapType) {\r\n        String[] tiles = filledTiles.trim().split(\"\\\\s+\");\r\n        int[] numbers = new int[tiles.length];\r\n\r\n        for (int i = 0; i < tiles.length; i++) {\r\n            numbers[i] = Integer.parseInt(tiles[i]);\r\n        }\r\n\r\n        Color pathColor = getPathColor(mapType);\r\n        Color terrainColor = getTerrainColor(mapType);\r\n        Color finishColor = getFinishColor(mapType);\r\n\r\n        for (int i = 0; i < lineLength; i++) {\r\n            if (i == lineLength - 1) {\r\n                createTile(lineLength, finishColor, labels5x5, mapType);\r\n                break;\r\n            }\r\n\r\n            if (contains(numbers, i)) {\r\n                createTile(lineLength, pathColor, labels5x5, mapType);\r\n            } else {\r\n                createTile(lineLength, terrainColor, labels5x5, mapType);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get unique terrain color for each map type\r\n    private Color getTerrainColor(int mapType) {\r\n        return switch (mapType) {\r\n            case 0 -> new Color(110, 140, 80);      // Grassland\r\n            case 1 -> new Color(170, 220, 130);     // Bright Plains\r\n            case 2 -> new Color(230, 235, 240);     // Snowfield\r\n            case 3 -> new Color(200, 180, 140);     // \uD83C\uDF35 Canyon terrain (new)\r\n            case 4 -> new Color(90, 100, 150);      // Crystal Cavern\r\n            case 5 -> new Color(80, 110, 90);       // Swamp\r\n            default -> new Color(110, 140, 80);\r\n        };\r\n    }\r\n\r\n    private Color getPathColor(int mapType) {\r\n        return switch (mapType) {\r\n            case 0 -> new Color(100, 90, 60);       // Dirt path\r\n            case 1 -> new Color(130, 160, 90);      // Grass trail\r\n            case 2 -> new Color(190, 200, 210);     // Snow path\r\n            case 3 -> new Color(150, 120, 90);      // \uD83D\uDFE4 Dry sand path (new)\r\n            case 4 -> new Color(120, 160, 200);     // Crystal path\r\n            case 5 -> new Color(50, 70, 60);        // Mud path\r\n            default -> new Color(100, 90, 60);\r\n        };\r\n    }\r\n\r\n    private Color getFinishColor(int mapType) {\r\n        return switch (mapType) {\r\n            case 0 -> new Color(150, 120, 80);      // Forest base\r\n            case 1 -> new Color(170, 200, 100);     // Hilltop\r\n            case 2 -> new Color(255, 255, 255);     // Ice crystal\r\n            case 3 -> new Color(180, 140, 110);     // \uD83D\uDFE0 Stone gate (new desert style)\r\n            case 4 -> new Color(160, 190, 240);     // Crystal exit\r\n            case 5 -> new Color(100, 130, 110);     // Swamp den\r\n            default -> new Color(150, 120, 80);\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Checks if a value exists in an array.\r\n     * @param array the array to search through\r\n     * @param value the value to search for\r\n     * @return true if the value exists, false otherwise\r\n     */\r\n    public boolean contains(int[] array, int value) {\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Creates the map window and sets up the knight path based on the current wave.\r\n     * @param wave the current wave number\r\n     * @return a list of points representing the knight's path\r\n     * @throws InterruptedException if the thread is interrupted\r\n     */\r\n    private boolean isDialogShown = false;\r\n    public ArrayList<Point> MapWindow5x5(int wave) throws InterruptedException {\r\n\r\n        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n\r\n        addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(WindowEvent e) {\r\n                if (isDialogShown) return; // prevent multiple dialogs\r\n                isDialogShown = true;\r\n\r\n                int choice = JOptionPane.showConfirmDialog(\r\n                        Map.this,\r\n                        \"Do you exit the game\",\r\n                        \"Confirm Exit\",\r\n                        JOptionPane.YES_NO_OPTION\r\n                );\r\n\r\n                if (choice == JOptionPane.YES_OPTION) {\r\n                    System.exit(32);\r\n                    dispose();\r\n                }\r\n\r\n                isDialogShown = false; // allow future close attempts\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ArrayList<Point> KnightPath = new ArrayList<>();\r\n        Point finishTile = null;\r\n\r\n        switch (wave) {\r\n            case 1, 2 -> {\r\n                x = 5;\r\n                y = 6;\r\n            }\r\n            case 3 -> {\r\n                x = 7;\r\n                y = 8;\r\n            }\r\n            case 4, 5,6 -> {\r\n                x = 10;\r\n                y = 11;\r\n            }\r\n\r\n        }\r\n\r\n        setTitle(\"Map\");\r\n\r\n        setSize(x * TILE_SIZE, y * TILE_SIZE);\r\n        setLayout(new GridLayout(y, x));\r\n\r\n        JLabel[][] usedlabels;\r\n        switch (wave) {\r\n            case 1 -> {\r\n                map5x5(labels5x5);\r\n                createOptionLine(1);\r\n                usedlabels = labels5x5;\r\n            }\r\n            case 2 -> {\r\n                map5x5_w2(labels5x5);\r\n                createOptionLine(1);\r\n                usedlabels = labels5x5;\r\n            }\r\n            case 3 -> {\r\n                map7x7_w3(labels7x7);\r\n                createOptionLine(3);\r\n                usedlabels = labels7x7;\r\n            }\r\n            case 4 -> {\r\n                map10x10_w4(labels10x10);\r\n                createOptionLine(6);\r\n                usedlabels = labels10x10;\r\n            }\r\n            case 5 -> {\r\n                map10x10_w5(labels10x10);\r\n                createOptionLine(6);\r\n                usedlabels = labels10x10;\r\n            }  case 6 -> {\r\n                map10x10_w5(labels10x10);\r\n                createOptionLine(6);\r\n                usedlabels = labels10x10;\r\n            }\r\n            default -> usedlabels = labels5x5;\r\n        }\r\n\r\n        // Detect all path tiles and finish tile\r\n        if (usedlabels != null) {\r\n            for (int row = 0; row < usedlabels.length; row++) {\r\n                for (int col = 0; col < usedlabels[row].length; col++) {\r\n                    JLabel label = usedlabels[row][col];\r\n                    if (label != null) {\r\n                        if (Boolean.TRUE.equals(label.getClientProperty(\"isPath\"))||Boolean.TRUE.equals(label.getClientProperty(\"isFinish\"))\r\n\r\n\r\n                        ) {\r\n                            KnightPath.add(new Point(row, col));\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        pack();\r\n        setLocationRelativeTo(null);\r\n        setVisible(true);\r\n\r\n        Knight k = new Knight(100);\r\n        k.setKnightIcon();\r\n\r\n        revalidate();\r\n        System.out.println(\"map drawn\");\r\n        Thread.sleep(500);\r\n\r\n        System.out.println(\"Wave: \" + wave + \" | Grid: \" + y + \"x\" + x);\r\n\r\n        return KnightPath;\r\n    }\r\n\r\n\r\n    private boolean watcherRunning = false;\r\n    /**\r\n     * Handles the movement and actions of the tower strikes based on knight positions.\r\n     * @param knights the list of knights\r\n     * @param towerIndexes the list of tower positions\r\n     * @param towers the list of towers\r\n     * @param finishX the x-coordinate of the finish line\r\n     * @param finishY the y-coordinate of the finish line\r\n     * @param labelss the 2D array of labels for the map\r\n     */\r\n    public void towerStrikeWatcher(ArrayList<Knight> knights, ArrayList<Integer> towerIndexes, ArrayList<Tower> towers, int finishX, int finishY, JLabel[][] labelss)\r\n    {\r\n        if (watcherRunning) return;\r\n        watcherRunning = true;\r\n        stop = false;\r\n\r\n        for (Tower t : towers) {\r\n            t.setPosition(-99, -99);\r\n        }\r\n\r\n        for (int i = 0; i < towers.size(); i++) {\r\n            if (i * 2 + 1 < towerIndexes.size() && towers.get(i).getTowerIcon() != null) {\r\n                int x = towerIndexes.get(i * 2);\r\n                int y = towerIndexes.get(i * 2 + 1);\r\n                towers.get(i).setPosition(x, y);\r\n            }\r\n        }\r\n\r\n        new Thread(() -> {\r\n            try {\r\n                ArrayList<Tower> towersToRemove = new ArrayList<>();\r\n\r\n                while (true) {\r\n                    for (Tower tower : new ArrayList<>(towers)) {\r\n                        tower.setTowerIcon();\r\n\r\n                        if (tower.getDurability() <= 0 || tower.getX() < 0 || tower.getY() < 0) continue;\r\n\r\n                        int x = tower.getX();\r\n                        int y = tower.getY();\r\n                        boolean towerHitThisRound = false;\r\n\r\n                        for (Knight knight : knights) {\r\n                            if (knight.getHealth() <= 0) continue;\r\n\r\n                            int kx = knight.getCurrentX();\r\n                            int ky = knight.getCurrentY();\r\n\r\n                            boolean adjacent = (x - 1 == kx && y == ky) ||\r\n                                    (x + 1 == kx && y == ky) ||\r\n                                    (x == kx && y - 1 == ky) ||\r\n                                    (x == kx && y + 1 == ky);\r\n\r\n                            if (adjacent) {\r\n                                if (!towerHitThisRound) {\r\n                                    tower.setTowerIcon();\r\n                                    if (tower.getDurability() > 0) {\r\n                                        labelss[x][y].setIcon(tower.getTowerIcon());\r\n                                        labelss[x][y].revalidate();\r\n                                        labelss[x][y].repaint();\r\n                                    }\r\n\r\n                                    towerHitThisRound = true;\r\n                                }\r\n\r\n                                knight.setHealth(0);\r\n                                knight.setKnightIcon2(null);\r\n                                int finalKx = kx;\r\n                                int finalKy = ky;\r\n                                SwingUtilities.invokeLater(() -> {\r\n                                    labelss[finalKy][finalKx].setIcon(null);\r\n                                    labelss[finalKy][finalKx].revalidate();\r\n                                    labelss[finalKy][finalKx].repaint();\r\n                                });\r\n                                Thread.sleep(50);\r\n                            }\r\n                        }\r\n\r\n                        if (tower.getDurability() <= 0 && !towersToRemove.contains(tower)) {\r\n                            tower.setTowerIcon2();\r\n                            tower.setPosition(-99, -99); // mark as removed\r\n\r\n                            SwingUtilities.invokeLater(() -> {\r\n                                labelss[x][y].setIcon(null);\r\n                                labelss[x][y].revalidate();\r\n                                labelss[x][y].repaint();\r\n                            });\r\n                        }\r\n                    }\r\n                    boolean allDead = true;\r\n                    boolean reachedEnd = false;\r\n\r\n                    for (Knight knight : knights) {\r\n                        if (knight.getHealth() > 0) {\r\n                            allDead = false;\r\n                            if (knight.isAt(finishX, finishY)) {\r\n                                reachedEnd = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (reachedEnd) {\r\n                        if (!stop) {\r\n                            toggle.setGameResult(ProgramToggle.Result.LOST);\r\n\r\n                            stop = true;\r\n                        }\r\n                        this.dispose();\r\n                        break;\r\n                    }\r\n\r\n                    if (allDead) {\r\n                        if (!stop) {\r\n                            toggle.setGameResult(ProgramToggle.Result.WON);\r\n\r\n                            stop = true;\r\n                        }\r\n                        this.dispose();\r\n                        break;\r\n                    }\r\n\r\n                    Thread.sleep(50);\r\n                    watcherRunning = false;\r\n                }\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }).start();\r\n\r\n    }\r\n\r\n    public ProgramToggle getToggle() {\r\n        return toggle;\r\n    }\r\n\r\n    public void setToggle(ProgramToggle toggle) {\r\n        this.toggle = toggle;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Map.java b/src/Map.java
--- a/src/Map.java	(revision e35bf1f2582fbc0f7b4fc6e8f73cc60c308a5c52)
+++ b/src/Map.java	(date 1748328689494)
@@ -688,8 +688,10 @@
         new Thread(() -> {
             try {
                 ArrayList<Tower> towersToRemove = new ArrayList<>();
-
+int count=0;
                 while (true) {
+                    if(count==towers.size()){return;}
+                    count++;
                     for (Tower tower : new ArrayList<>(towers)) {
                         tower.setTowerIcon();
 
@@ -721,7 +723,10 @@
 
                                     towerHitThisRound = true;
                                 }
-
+tower.setDurability(tower.getDurability() - 1);
+if(tower.getDurability()==0){
+    tower.setTowerIcon2();
+};
                                 knight.setHealth(0);
                                 knight.setKnightIcon2(null);
                                 int finalKx = kx;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"cc6f03ff-8f68-4040-8d1b-eb9573294c86\" name=\"Changes\" comment=\".\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"customColor\": \"\",\r\n  \"associatedIndex\": 0\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2xcpKWxm8IZWNc9mSr3MskwgM4c\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"cc6f03ff-8f68-4040-8d1b-eb9573294c86\" name=\"Changes\" comment=\"\" />\r\n      <created>1748247153834</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1748247153834</updated>\r\n      <workItem from=\"1748247155077\" duration=\"4621000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\".\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1748247495517</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1748247495518</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\".\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1748248317821</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1748248317821</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\".\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1748249968495</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1748249968495</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\".\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1748252851048</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1748252851048</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\".\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\".\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e35bf1f2582fbc0f7b4fc6e8f73cc60c308a5c52)
+++ b/.idea/workspace.xml	(date 1748522334959)
@@ -1,42 +1,55 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="AutoImportSettings">
-    <option name="autoReloadType" value="SELECTIVE" />
+    <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="cc6f03ff-8f68-4040-8d1b-eb9573294c86" name="Changes" comment="." />
+    <list default="true" id="cc6f03ff-8f68-4040-8d1b-eb9573294c86" name="Changes" comment=".">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Map.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Map.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ClangdSettings">
+    <option name="formatViaClangd" value="false" />
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "customColor": "",
-  "associatedIndex": 0
-}]]></component>
+  <component name="ProjectColorInfo">{
+  &quot;customColor&quot;: &quot;&quot;,
+  &quot;associatedIndex&quot;: 0
+}</component>
   <component name="ProjectId" id="2xcpKWxm8IZWNc9mSr3MskwgM4c" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Main.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "master",
-    "kotlin-language-version-configured": "true",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.readMode.enableVisualFormatting&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
+    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/ivose/Downloads/TowerDefensesd2&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -53,7 +66,9 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1748247153834</updated>
-      <workItem from="1748247155077" duration="4621000" />
+      <workItem from="1748247155077" duration="5250000" />
+      <workItem from="1748328483023" duration="3669000" />
+      <workItem from="1748522265894" duration="69000" />
     </task>
     <task id="LOCAL-00001" summary=".">
       <option name="closed" value="true" />
@@ -87,7 +102,15 @@
       <option name="project" value="LOCAL" />
       <updated>1748252851048</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary=".">
+      <option name="closed" value="true" />
+      <created>1748268753535</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1748268753535</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"graalvm-ce-21\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision e35bf1f2582fbc0f7b4fc6e8f73cc60c308a5c52)
+++ b/.idea/misc.xml	(date 1748339819577)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="graalvm-ce-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
